buildscript {
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "$project.minecraft_version-$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version"
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain() {
    languageVersion = JavaLanguageVersion.of(17)
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    if (has_at) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            // property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            // property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
      dir 'libs'
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    def replaceProperties = [
            "loader_version_range"    : loader_version_range,
            "mod_license"             : mod_license,
            //"issue_tracker_url"       : issue_tracker_url,
            "mod_id"                  : mod_id,
            "mod_version"             : "$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version",
            "mod_name"                : mod_name,
            //"update_url"              : update_url,
            //"display_url"             : display_url,
            //"logo_file"               : logo_file,
            //"credits"                 : credits
            "mod_authors"             : mod_authors,
            "mod_description"         : mod_description,
            "neo_version_range"       : neo_version_range,
            "minecraft_version_range" : minecraft_version_range
    ]
    outputs.upToDateWhen { false }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    finalizedBy 'reobfJar'
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_group_id,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : "${major_version}-${minor_version}-${patch_version}",
                'Implementation-Vendor'   : mod_group_id,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "10000"
    }
}
